#pragma once
#pragma pack(push,1)

// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: weapon_crowbar
class CBasePlayerWeapon : public CBasePlayerItem {
public:
    byte u9_0[3];
    bool m_bPlayEmptySound; // Whether to play the empty sound when the player attempts to fire
    bool m_bFireOnEmpty; // True when the gun is empty and the player is still holding down the attack key(s)
    byte u9_1[2];
    float m_flNextPrimaryAttack; // soonest time ItemPostFrame will call PrimaryAttack
    float m_flNextSecondaryAttack; // soonest time ItemPostFrame will call SecondaryAttack
    float m_flNextTertiaryAttack; // soonest time ItemPostFrame will call TertiaryAttack
    float m_flTimeWeaponIdle; // soonest time ItemPostFrame will call WeaponIdle
    int m_iPrimaryAmmoType; // "primary" ammo index into players m_rgAmmo[]
    int m_iSecondaryAmmoType; // "secondary" ammo index into players m_rgAmmo[]
    int m_iClip; // number of shots left in the primary weapon clip, -1 it not used
    int m_iClip2; // number of shots left in the secondary weapon clip, -1 it not used
    byte u9_2[12];
    bool m_fInReload; // Are we in the middle of a reload
    byte u9_3[3];
    float m_flCustomDmg; // Per-entity weapon damage
    bool m_fIsAkimbo; // Weapon is in 'akimbo' mode
    bool m_fInZoom; // Weapon is zoomed in
    byte u9_4[6];
    float m_flNextBurstRound; // When the next burst round is to be fired
    byte u9_5[4];
    int m_iDefaultAmmo; // The amount of primary ammo you receive when you pick up this weapon as placed by a level designer.
    int m_iDefaultSecAmmo; // The amount of secondary ammo you receive when you pick up this weapon as placed by a level designer.
};
#pragma pack(pop)
