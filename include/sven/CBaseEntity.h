#pragma once
#pragma pack(push,1)
#include <extdll.h>
#include <meta_api.h>
#include <string>

// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: player
class CBaseEntity {
public:
    byte u0_0[4];
    entvars_t* pev; // Entity variables
    byte u0_1[48];
    bool m_fOverrideClass; // Whether this entity overrides the classification.
    byte u0_2[3];
    int m_iClassSelection; // The overridden classification.
    byte u0_3[20];
    float m_flMaximumFadeWait; // Maximum fade wait time.
    float m_flMaximumFadeWaitB; // Maximum fade wait time B.
    bool m_fCanFadeStart; // Whether fading can start.
    byte u0_4[11];
    bool m_fCustomModel; // Whether a custom model is used.
    byte u0_5[3];
    vec3_t m_vecLastOrigin; // Last origin vector
    string_t targetnameOutFilterType; // Target name out filter type.
    string_t classnameOutFilterType; // Class name out filter type.
    string_t targetnameInFilterType; // Target name in filter type.
    string_t classnameInFilterType; // Class name in filter type.
    byte u0_6[16];
    int m_iOriginalRenderMode; // Original render model.
    int m_iOriginalRenderFX; // Original render FX.
    float m_flOriginalRenderAmount; // Original render amount.
    vec3_t m_vecOriginalRenderColor; // Original render color.

    edict_t* edict() { return pev->pContainingEntity; }

    int entindex() { return ENTINDEX(pev->pContainingEntity); }

    bool IsPlayer() { return pev->flags & FL_CLIENT; }

    bool IsMonster() { return pev->flags & FL_MONSTER; }

    // TODO: func_door can be breakable but the field to determine that
    //       is private and not exposed to angelscript
    bool IsBreakable() { return GetClassname() == "func_breakable"; }

    bool IsBSPModel() { return pev->solid == SOLID_BSP || pev->movetype == MOVETYPE_PUSHSTEP; }

    bool IsAlive() { return !pev->deadflag && pev->health > 0.0f; }

    std::string GetClassname() { return STRING(pev->classname); }
};
#pragma pack(pop)
