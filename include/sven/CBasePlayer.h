#pragma once
#pragma pack(push,1)

// This code was automatically generated by the ApiGenerator plugin.
// Prefer updating the generator code instead of editing this directly.
// "u[]" variables are unknown data.

// Example entity: player
class CBasePlayer : public CBaseMonster {
public:
    byte u6_0[48];
    float m_flNextClientCommandTime; // The next time this player can execute a vocal client command
    byte u6_1[4];
    float m_flTimeOfLastDeath; // Time of last death.
    float m_flRespawnDelayTime; // Gets added to the standard respawn delay time when killed, reset in spawn to 0.0.
    EHandle m_hSpawnPoint; // Pointer for a spawn point to use.
    byte u6_2[12];
    float m_flLastMove; // When did this player move or tried to move (with the IN_ keys) ?
    byte u6_3[16];
    int m_iWeaponVolume; // How loud the player's weapon is right now.
    int m_iExtraSoundTypes; // Additional classification for this weapon's sound.
    int m_iWeaponFlash; // Brightness of the weapon flash.
    float m_flStopExtraSoundTime; // When to stop the m_iExtraSoundTypes sounds.
    byte u6_4[4];
    int m_iFlashBattery; // Player flashlight amount. 0 &lt;= amount &lt;= 100.
    int m_afButtonLast;
    int m_afButtonPressed;
    int m_afButtonReleased;
    byte u6_5[16];
    float m_flFallVelocity; // Current fall speed.
    byte u6_6[32];
    unsigned int m_afPhysicsFlags;
    byte u6_7[12];
    float m_flSwimTime; // How long this player has been underwater.
    byte u6_8[296];
    float m_lastDamageAmount; // how much damage did monster (player) last take.
    float m_tbdPrev; // Time-based damage timer.
    byte u6_9[32];
    byte m_chTextureType; // Current texture type.<br>See TextureType enum.
    byte u6_10[3];
    int m_iDrownDmg; // Track drowning damage taken.
    int m_iDrownRestored; // Track drowning damage restored.
    byte u6_11[8];
    int m_iTrain; // Train control position
    byte u6_12[16];
    EHandle m_hTank; // the tank which the player is currently controlling, NULL if no tank
    float m_fDeadTime; // the time at which the player died
    byte u6_13[1];
    bool m_fLongJump; // Does this player have the longjump module?
    byte u6_14[22];
    int m_iFOV; // Field of view.
    byte u6_15[48];
    int m_iHideHUD; // The players hud weapon info is to be hidden.
    byte u6_16[88];
    EHandle m_hActiveItem; // The active item.
    byte u6_17[16];
    int m_rgAmmo[64]; // Player ammo amount
    byte u6_18[272];
    int m_iDeaths; // get player death count.
    byte u6_19[12];
    float m_flNextDecalTime; // Next time this player can spray a decal.
    byte u6_20[1896];
    int m_iPlayerClass; // The player's class type.

    bool IsConnected() {
        return true; /* return *((byte*)this + 3292); */
    }

    bool IsAlive() {
        return !pev->deadflag && pev->health > 0.0f && IsConnected();
    }

    bool IsOnLadder() {
        return pev->movetype == MOVETYPE_FLY;
    }

    // TODO: maps/plugins can change iuser1 so it's not super reliable. Use the angelscript api
    bool IsObserver() {
        return pev->iuser1 > 0;
    }

    // TODO: maps/plugins can change iuser2 so it's not super reliable. Use the angelscript api
    edict_t* GetObserverTarget() {
        return IsObserver() ? INDEXENT(pev->iuser2) : NULL;
    }
};
#pragma pack(pop)
